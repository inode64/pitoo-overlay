# -*-eselect-*-  vim: ft=eselect

DESCRIPTION="Manage the portage snapshot link"
MAINTAINER="mwitsch@gmail.com"
VERSION="20130924"

local SNAP_DIRECTORY="/usr/chaotix/snapshots/"
local SNAP_HOST="${SNAP_HOST}"

find_targets() {
	local file
	for file in /usr/chaotix/snapshots/portage-[[:digit:]]*.sqfs
	do
		[[ -f ${file} ]] && basename "$file"
	done
}

is_mounted() {
	if [[ $(/bin/mount) != *"/usr/portage"* ]] 
	then
		write_warning_msg "Snapshot is not mounted"
	fi
}

describe_fetch() {
	echo "Fetch latest portage snapshot file and set it as current"
}

do_fetch() {
	
	local current=$(wget -q -O - ${SNAP_HOST}/current "$@") 

	write_list_start "Current snapshot is: ${current}"

	[[ -d /usr/chaotix/snapshots ]] || mkdir -p /usr/chaotix/snapshots

	if [ ! -f /usr/chaotix/snapshots/${current} ]
	then
		wget -O /usr/chaotix/snapshots/${current} ${SNAP_HOST}/${current} 
		do_set ${current}
	else
		die -q "You already have the latest snapshot"
	fi
	

}

describe_list() {
	echo "List available portage snapshots"
}

do_list() {
	local i targets=( $(find_targets) )
	write_list_start "Available chaotix portage snapshots:"
	for (( i = 0; i < ${#targets[@]}; i++ ))
	do
		[[ ${targets[i]} = \
		$(basename "$(canonicalise "/usr/chaotix/snapshots/portage.sqfs")") ]] \
		&& targets[i]=$(highlight_marker "${targets[i]}") 
	done
	write_numbered_list -m "(none found)" "${targets[@]}"
	is_mounted
}

describe_show() {
	echo "Show active portage snapshot symlink"
}

do_show() {
	write_list_start "Current chaotix snapshot symlink:"
	if [[ -L /usr/chaotix/snapshots/portage.sqfs ]]
	then
		local chaotix=$(canonicalise "/usr/chaotix/snapshots/portage.sqfs")
		write_kv_list_entry "${chaotix%/}" ""
	else
		write_kv_list_entry "(unset)" ""
	fi
	is_mounted
}

describe_unmount() {
	echo "Unmount portage snapshot"
}

do_unmount() {
	if [[ $(/bin/mount) != *"/usr/portage"* ]]
	then
		write_warning_msg "Snapshot is not mounted"
	else
		write_list_start "Unmounting chaotix portage snapshot"
		umount ${EROOT}/usr/portage || die -q "Could not unmount snapshot"
	fi
}

describe_mount() {
	echo "Mount portage snapshot"
}

do_mount() {
	if [[ $(/bin/mount) == *"/usr/portage"* ]]
	then
		write_warning_msg "Snapshot is already mounted"
	else
		[[ -e ${EROOT}/usr/chaotix/snapshots/portage.sqfs ]] || die -q "Snapshot link does not exist"
		write_list_start "Mounting chaotix portage snapshot"
		mount ${EROOT}/usr/chaotix/snapshots/portage.sqfs ${EROOT}/usr/portage || die -q "Could not mount snapshot"
	fi
}

remove_symlink() {
	rm -f "${EROOT}/usr/chaotix/snapshots/portage.sqfs"
}

set_symlink() {
	local target=$1

	if is_number "${target}"
	then
		local targets=( $(find_targets) )
		target=${targets[target-1]}
	fi

	write_list_start "setting link to ${target}"

	[[ -z ${target} || ! -f ${EROOT}/usr/chaotix/snapshots/${target} ]] && die -q "Target \"$1\" does not seem valid!"

	ln -s "${target}" "${EROOT}/usr/chaotix/snapshots/portage.sqfs"
}

describe_set() {
	echo "Set portage snapshot symlink to a specific snapshot file"
}

do_set() {
	[[ -z $1 ]] && die -q "You didn't give me a target"
	[[ $# -gt 1 ]] && die -q "Too many parameters"

	do_unmount 
	remove_symlink || die -q "Could not remove old symlink"
	set_symlink $1 || die -q "Could not set new symlink"
	do_mount
}

describe_update() {
	echo "Set portage snapshot symlink to latest locally available snapshot"
}

do_update() {
    [[ $# -gt 1 ]] && die -q "update does not take arguments"
	
	local targets=( $(find_targets) )
	do_set ${#targets[@]}
}

### new functions start here

describe_check() {
	echo "Show current portage snapshot available"
}

do_check() {
	[[ $# -gt 1 ]] && die -q "check does not take arguments"

	local current=$(wget -q -O - ${SNAP_HOST}/current "$@")
    	write_list_start "Latest available snapshot is:"
	write_kv_list_entry "${current}"
	echo
	do_show
}

describe_remove() {
	echo "Remove a portage snapshot file"
}

do_remove() {
	local target=$1

	if is_number "${target}"
	then
		local targets=( $(find_targets) )
		target=${targets[target-1]}
	fi

	write_list_start "removing ${target}"

	[[ -z ${target} || ! -f ${EROOT}/usr/chaotix/snapshots/${target} ]] && die -q "Target \"$1\" does not seem valid!"

	rm ${EROOT}/usr/chaotix/snapshots/${target}

}

describe_available() {
	echo "List available portage snapshots on server"
}

do_available() {
	local avail=$(wget -q -O - ${SNAP_HOST}/ |
	grep portage | cut -d"\"" -f2 | sort)

	write_list_start "Available chaotix portage snapshots on server:"
#	for (( i = 0; i < ${#avail[@]}; i++ ))
#	do
#		[[ ${avail[i]} = \
#		$(basename "$(canonicalise "/usr/chaotix/snapshots/portage.sqfs")") ]] \
#		&& targets[i]=$(highlight_marker "${avail[i]}") 
#	done
	local j=1
	for i in ${avail}
	do
		write_numbered_list_entry ${j} ${i}
		local j=`expr 1 + ${j}`
	done

}
